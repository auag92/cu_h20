function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 13-Nov-2016 15:36:17.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx40 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-12.7802230639411;-8.02472972114725;-4.47119727909281;-3.72117762922308;-4.51301791096288;-3.01263997240765;-2.42480049553745;-0.903467003340177;-0.982011066887872;-0.992950151526825;-0.909871332184159;-0.514509374167196;-0.347829758284772;-0.348533333735644;-0.324828845074708;-0.302944090225973;-0.176788229982257;-0.189022811369171;-0.111438133671731;-0.0965930093379974;-0.0942724030799313;-0.0907632767205718;-0.0627769149044037;-0.0534843942182564;-0.0519742390141951;-0.0374828623272187;-0.0490705698776343;-0.0244317924974365;-0.0260031604377391;-0.0266343974964539;-0.0237256110156129;-0.0179757197278836;-0.0142382038248756;-0.0168055522529993;-0.0129664830097127;-0.00817430420023063;-0.00863497536010552;-0.00765451299310768;-0.00502459936647711;-0.00483752557834656];
x1_step1.gain = [0.0745494943699028;0.131712219594162;0.23701546122223;0.223678801791652;0.232589022354283;0.320251194109121;0.440225958714896;0.718743161768431;0.798852771879617;1.00436079424693;1.25598501058765;2.10840020288283;1.89407524453323;2.72910661561977;3.80345480238336;3.99026705369256;5.27621628941603;6.04666084568524;8.92430657443746;9.59849037657045;10.3309002113336;11.855931971013;13.6884749857404;19.3874018263877;22.2845413624915;26.0945776018096;24.1111970000599;40.4091775586644;28.6063902984765;44.5229310374693;45.5398537665927;55.0581311146987;57.0458451444085;71.8893563202517;76.8347279511948;105.004292880137;115.932591652754;146.750932412307;193.061498684558;224.459390889256];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.4355017103588461;0.66331268018719225;-0.1314624764064479;1.1817122806037381;2.6621901331472477];
IW1_1 = [-0.20751153155776239 0.64347857229922056 1.7603526886111867 -0.32746205594696765 -1.3904042147615319 0.12708897749379347 -0.65848877576116749 -1.2109663989483201 -1.1733643430480283 0.43673596473672616 -1.0866474128257571 0.014409936000642528 -0.38509739195419679 -0.47683511989893768 -0.88441744999938476 0.74474417948844562 -0.28733616521585065 -0.22701710241195763 0.13196677631508072 -0.20465001974192326 0.099399003865050226 0.33093249243504375 -0.29367577978295067 0.16122432385361707 -0.20590134076174291 0.0089894389064358107 0.36940321947444915 -0.030906185832781898 -0.37283275071387856 -0.16451922604447203 0.25217322624147898 -0.014141372081844824 0.59295301169432824 0.067294304721525589 -0.23835951559013821 -0.57934426210834522 -0.13806052794488233 0.62393667294591637 0.33217421083547782 0.084594453086538332;-0.079688941457759316 0.29584618530932727 0.58368749831599864 0.11456564831669953 0.065451237243115343 0.21409606277004908 -0.16159860837817944 -0.019390655179697243 -0.51205255870264399 -0.1555752243618797 -0.021431643084440236 0.16842521723739312 0.42950536303770048 0.17043248337574793 -0.30763040989900853 0.24821739338750259 0.44565342742520464 -0.079683439106455659 0.079903962004764878 -0.39203280452497158 -0.013472633667346112 -0.13252360703604943 -0.40492352586344943 0.087828622882803256 -0.27427670212381339 -0.1694904324083287 -0.32282609708267879 0.14553658802582906 -0.29805313240286585 -0.12718081883301913 -0.16100871395278377 -0.10344773839405519 -0.069046354418513492 -0.12426201275056346 0.16489285357574554 0.082761851559297411 -0.11502765057375409 0.0015040876586328677 -0.22524197660978992 -0.033802190104467028;0.0095880032939699919 0.15218641433746147 0.41435625933345482 -0.094402622101301847 -0.43901438146202354 0.034310540994645887 -0.23827954326111039 -0.21214831091271158 -0.11753790950612754 0.09795559645105234 -0.25346476516389488 0.34661561793808221 -0.66692736282665466 -0.48264101269123982 -0.19578915864332205 0.52797376799698392 -0.21134845577404757 0.088576616028761324 0.17882926690793208 -0.066982611484652177 -0.074015621212283861 0.4082489271112732 0.3313596029115205 -0.25222612476839801 -0.020848897417575226 0.13155387468725754 0.15674931056729885 -0.10393159836398309 0.06531093759429861 -0.034243506818434612 0.14591299092765914 -0.055154600069557816 0.25302402075334079 0.14712204514217922 -0.21098002687821846 -0.42192795942575795 0.15061707532347021 0.04955320467416735 0.18778042778561385 0.039266777383419854;-0.036243178245314422 0.32455807356131 0.56222225933436898 0.30305310100980182 -0.04261477876730204 0.22133251396892667 -0.038536042403668917 0.32078512569605466 -0.32278162151952389 0.097607032443127878 -0.32955459488185651 0.50537471243230647 0.28090881142875906 -0.14372927846278247 -0.26800941430558362 0.46938746700154532 0.40449163690109935 0.049813234587088029 0.26833715018474658 -0.44985138125584129 0.090773431082696004 0.28823693510645321 -0.16376597219622638 -0.25195939367672704 -0.14422934709304436 0.046260247004845108 -0.4097072774573457 0.056399683550068906 -0.22671944057661472 -0.14497287249704327 -0.16779490038739139 -0.2838619474063131 0.31922861405760888 -0.06046643687583475 0.056514199997972581 -0.2068214065975677 -0.064567814201869481 0.0052778465064651139 -0.16183858474479951 0.038375822197643975;-0.61936410776299 -0.2694483711933584 -0.92553923328382581 0.15772198129912759 0.028264596415289011 0.15851114944497044 0.34103934263242769 -0.40660409237943734 0.93447652067225073 1.1141994629454035 -1.831774781061319 -0.65276565739824621 0.78901058529537249 0.097916040047613229 0.66463726683858348 -0.46385359379162105 -0.84190313499579705 0.83414134195064116 -0.1643926615531226 0.87333852681300661 0.2690946038754734 -0.047607907475659655 0.10799433186085741 0.67783484168625041 0.11171046678555555 0.25695057775347452 -0.067020811703426511 -0.43015249324637367 -1.1866261052797802 -0.32851212208228014 0.18342837865983183 0.94784685544056113 0.62603458462027473 -0.099117424373061827 0.53811242480729771 0.59618865290448242 -0.054337125770467544 0.96654322494515266 0.51745470554943918 0.2973496619948196];

% Layer 2
b2 = -1.3190340114000172;
LW2_1 = [-0.84343329805328471 2.7855765413331266 2.1458903590483671 -2.5312133243853476 1.673881996641023];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.25950794957191;
y1_step1.xoffset = 2049.8207;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
