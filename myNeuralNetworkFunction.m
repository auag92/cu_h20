function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 23-Nov-2016 15:55:09.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx9 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.053617;1.347143;13.299153;-0.321822;1.825735;12.600395;-0.202343;1.953421;12.577538];
x1_step1.gain = [0.55484858598225;0.52654123225918;0.740786285379027;0.499232928605198;0.487129668802974;0.614741312245247;0.56911244637538;0.442949342762839;0.472385857995615];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.0852766435320786442;1.5442895072031674886;-0.68997623632376980929;0.080386148603647650246;0.61515151649359867125;-0.97095681047901072347;0.85314442509589261121;-0.85026069568952666877];
IW1_1 = [-2.4663945159928184481 -0.12560441112369272187 0.12763875087958759247 0.73624591548393703011 -0.13676818158509537748 0.27131295390633725084 1.9186011554132647028 -0.34702965260988505314 -0.25700225994738612467;-1.3735887579328165398 -1.468436318374423788 0.8857950850587738012 1.1703526560911778898 -0.19015314167908534126 -1.015767391620593818 -0.1370447924582553767 1.854109300497164492 -0.23382734633457297191;-0.57986719811824494197 -0.46882610351380760161 -0.69450336031060200259 0.94729487979418880439 -0.83691790310830160848 0.45120661281429952361 -0.50169420194192870799 0.062440792404340507427 -0.9382207462749014848;-0.63481684991604003798 -0.54910770905662875663 -1.8920519887117246416 -0.12128221474001199542 0.077256847011809376413 0.7716831047264537391 0.57374370767813198668 0.46703105196383448705 -0.11866583362996084572;-0.44575480927212746129 -0.67605360861358110292 0.82391950685494796947 -0.75629892746768645484 0.14330170950573078992 0.83063921563220211031 -0.33416007218292553826 -0.78802622360063312446 -1.2640917542988572286;-0.4252624803678839438 0.97821522137483363224 -0.41782787242341318246 0.45356043659274575264 -0.6399293711084110825 -0.076318855446451366875 1.5965698081751478199 -0.18998426136035595491 0.076173840040359569459;1.7839271242284917562 1.0356232732923624784 -0.051540970315275241864 -0.88764149469011011107 1.1047405548866628955 -0.33048536092928809671 -0.20698971003896382559 0.11621479573907868288 0.72949145518825575518;-0.2739779142909808396 1.6655412050055371509 1.1217498476691478704 0.59226842637879795195 0.49177775426721181962 0.57343187041040399876 0.25418001588783323275 -2.0703817490200773221 0.084811780160741701007];

% Layer 2
b2 = 2.1764392939205259303;
LW2_1 = [2.9187354564650496158 -1.6384627168998282531 2.3046587942653458114 -1.8867924468803092264 -1.9683980583766631511 -2.0128013522815715319 1.7166177616474853629 -1.5142539136039923076];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.25950794957191;
y1_step1.xoffset = -2057.527593;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
